#include <Subsystems/PIDDrive.h>
#include "../RobotMap.h"
#include "../WaveConstants.h"

PIDDrive::PIDDrive() :
PIDSubsystem("Drive", 1.0, 0.0, 0.0)
{
	m_robotDrive = RobotMap::m_robotDrive;
	// insert motor controllers, sensors, and everything else in here
	m_driveEncoderLeft = RobotMap::m_driveEncoderLeft;
	m_driveEncoderRight = RobotMap::m_driveEncoderRight;
	m_shifter = RobotMap::shifter;
	m_inchesToDrive = 0;
	m_distanceDriven = 0;
}

double PIDDrive::ReturnPIDInput() {
	// Return your input value for the PID loop
	// e.g. a sensor, like a potentiometer:
	// yourPot->SetAverageVoltage() / kYourMaxVoltage;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
	return m_driveEncoderLeft->PIDGet();
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}

void PIDDrive::setDriveOutputPID()
{
	//Wave - Add the other motors here. leftFront output is set in PIDController::Calculate()
	float motorVal = GetPIDController()->Get();
	m_robotDrive->TankDrive(motorVal, motorVal);
}

float PIDDrive::getPIDOutput()
{
	return GetPIDController()->Get();
}

void PIDDrive::UsePIDOutput(double output) {
	m_robotDrive->TankDrive(output, output);

	// Use output to drive your system, like a motor
	// e.g. yourMotor->Set(output);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
	//	leftFront->PIDWrite(output);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void PIDDrive::setDistance(double inches)
{
	m_inchesToDrive = inches;
	//Wave - Now somehow send this information to the PID
	PIDController *pid = GetPIDController();
	pid->Reset();
	pid->SetSetpoint(m_inchesToDrive);
	pid->Enable();
}

void PIDDrive::InitDefaultCommand()
{

}

void PIDDrive::ShiftGear(bool highGear)
{
	if (highGear)
	{
		m_shifter->Set(On);
	}
	else
	{
		m_shifter->Set(Off);
	}
}

void PIDDrive::DriveWithJoysticks(float left, float right)
{
	m_robotDrive->ArcadeDrive(left,right);
}

double PIDDrive::getCurrentDistance()
{
	return m_driveEncoderLeft->PIDGet();
}
void PIDDrive::displayEncoders()
{
	std::cout << m_driveEncoderLeft->Get() << "\t\t";
	std::cout << m_driveEncoderRight->Get() << "\t\t";
	std::cout << abs(m_driveEncoderLeft->Get()-m_driveEncoderRight->Get()) << std::endl; // difference between them
}

#include "Drive.h"
#include "../RobotMap.h"
#include "../WaveConstants.h"

Drive::Drive() :
		PIDSubsystem("Drive", 1.0, 0.0, 0.0)
{
	m_robotDrive = new RobotDrive(RobotMap::leftDrive1, RobotMap::leftDrive2, RobotMap::rightDrive1, RobotMap::rightDrive2);
 // insert motor controllers, sensors, and everything else in here
	m_driveEncoderLeft = RobotMap::m_driveEncoderLeft;
	m_driveEncoderRight = RobotMap::m_driveEncoderRight;
	m_inchesToDrive = 0;
	m_distanceDriven = 0;
}

double Drive::ReturnPIDInput() {
	// Return your input value for the PID loop
	// e.g. a sensor, like a potentiometer:
	// yourPot->SetAverageVoltage() / kYourMaxVoltage;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return m_driveEncoderLeft->PIDGet();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}

void Drive::setDriveOutputPID()
{
    //Wave - Add the other motors here. leftFront output is set in PIDController::Calculate()
    float motorVal = GetPIDController()->Get();
    m_robotDrive->TankDrive(motorVal, motorVal);
}

float Drive::getPIDOutput()
{
return GetPIDController()->Get();
}

void Drive::UsePIDOutput(double output) {
	m_robotDrive->TankDrive(output, output);

	// Use output to drive your system, like a motor
	// e.g. yourMotor->Set(output);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
//	leftFront->PIDWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void Drive::setDistance(double inches)
{
    m_inchesToDrive = inches;
    //Wave - Now somehow send this information to the PID
    PIDController *pid = GetPIDController();
    pid->Reset();
    pid->SetSetpoint(m_inchesToDrive);
    pid->Enable();
}

void Drive::InitDefaultCommand()
{

}

void Drive::ShiftGear(bool highGear)
{
	if (highGear)
		{
			RobotMap::shifter->Set(On);
		}
		else {
			RobotMap::shifter->Set(Off);
		}
}

void Drive::DriveWithJoysticks(float left, float right)
{
	m_robotDrive->ArcadeDrive(left,right);
}

double Drive::getCurrentDistance()
{
	return m_driveEncoderLeft->PIDGet();
}
